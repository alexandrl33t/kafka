version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

    networks:
      - sashaNET

  broker:
    image: confluentinc/cp-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100

    networks:
      - sashaNET

  kafka-connect:
    image: confluentinc/cp-kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_GROUP_ID: sashaNET
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_PLUGIN_PATH: /connect_plugins
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_POSTGRES_CONNECT: postgres:5432
      KAFKA_MONGO_CONNECT: mongo:27017
    volumes:
      - ./kafka/connectors:/connect_plugins
      - ./kafka/connector_configs:/connect_configs
    depends_on:
      - broker
    networks:
      - sashaNET
  
  control-center:
    image: confluentinc/cp-enterprise-control-center
    depends_on:
      - broker
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT_CLUSTER: 'kafka-connect:8083'
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: "/connectors"
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 104857600
    command:
      - bash
      - -c 
      - |
        echo "Waiting 30 seconds for Kafka brokers to start and 
               necessary topics to be available"
        sleep 30  
        /etc/confluent/docker/run
    networks:
      - sashaNET

  postgres-ma:
    build: ./services/postgres
    depends_on:
      - postgres
    env_file:
      - .env
    networks:
      - sashaNET

  mongo-ma:
    build: ./services/mongo
    depends_on:
      - mongo
      - broker
    environment:
      - KAFKA_ADDRESS=broker:29092
    networks:
      - sashaNET

  postgres:
    image: debezium/postgres
    environment:
      - POSTGRES_USER=${POSTGRE_USER}
      - POSTGRES_PASSWORD=${POSTGRE_PASS}
      - POSTGRES_DB=${POSTGRE_DBNAME}
    networks:
      - sashaNET

  mongo:
    image: "mongo:4.0-xenial"
    container_name: mongo
    networks:
      - sashaNET
    ports:
      - "27017:27017"
    restart: always

#  elastic:
#    image: elasticsearch:8.4.3
#    environment:
#      - xpack.security.enabled=false
#      - discovery.type=single-node
#    networks:
#      - sashaNET
#    #ports:
#    #  - 54321:9200

#  neo4j:
#    image: neo4j
#    environment:
#      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASS}
#    ports:
#      - "7474:7474"
#      - "7687:7687"
#    volumes:
#      - ./databases/neo4j/plugins:/plugins
#    networks:
#      - sashaNET
  frontend:
    image: busybox
    #entrypoint: []
    command: [ "/bin/busybox", "httpd", "-f", "-p", "8080" ]
    working_dir: /
    environment:
      SECRET_KEY2: aabbcc
      ENV_IS_SET2:
    links:
      - postgres-ma
    labels:
      my.label: my_value

    networks:
      - sashaNET

networks:
  sashaNET:
    driver: bridge