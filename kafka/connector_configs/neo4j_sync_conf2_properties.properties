name = neo4j_sync_connector
connector.class = streams.kafka.connect.sink.Neo4jSinkConnector
key.converter = org.apache.kafka.connect.storage.StringConverter
value.converter = org.apache.kafka.connect.json.JsonConverter
topics = postgres-sync.public.groups, postgres-sync.public.students, postgres-sync.public.specialities, postgres-sync.public.departments
topics.regex = 
neo4j.authentication.basic.username = neo4j
neo4j.authentication.basic.password = 228008
neo4j.server.uri = bolt://neo4j:7687
neo4j.topic.cypher.postgres-sync.public.students = CALL apoc.do.case([event.op = 'd', 'MATCH (s:Student {id: mger}) DETACH DELETE s', \
    event.op = 'c', 'MERGE(g:Group{id: mgerGroup}) MERGE (s:Student{id: mgerId}) MERGE (s)-[:member_of]->(g)', \
    event.op = 'u', 'MATCH(s:Student{id: mgerId})-[rel:member_of]->(:Group{id: befGroupFk}) MATCH(g:Group{id: mgerGroup}) DELETE rel MERGE (s)-[:member_of]->(g)'], \
    '', {mger: event.before.id, befGroupFk: event.before.group_fk, mgerId: event.after.id, mgerGroup: event.after.group_fk}) YIELD value as mger \
    RETURN mger
neo4j.topic.cypher.postgres-sync.public.groups = CALL apoc.do.case([event.op = 'd', 'MATCH (g:Group {id: mger}) DETACH DELETE g', \
    event.op = 'c', 'MERGE(s:Speciality{id: mgerSpec}) MERGE (g:Group{id: mgerId}) MERGE (g)-[:member_of]->(s)', \
    event.op = 'u', 'MATCH(g:Group{id: mgerId})-[rel:member_of]->(:Speciality{id: befSpecFk}) MATCH(s:Speciality{id: mgerSpec}) DELETE rel MERGE (g)-[:member_of]->(s)'], \
    '', {mger: event.before.id, befSpecFk: event.before.speciality_fk, mgerId: event.after.id, mgerSpec: event.after.speciality_fk}) YIELD value as mger \
    RETURN mger
neo4j.topic.cypher.postgres-sync.public.specialities = CALL apoc.do.case([event.op = 'd', 'MATCH (s:Speciality {id: mger}) DETACH DELETE s', \
    event.op = 'c', 'MERGE(d:Department{id: mgerDep}) MERGE (s:Speciality{id: mgerId}) MERGE (s)-[:belongs_to]->(d)', \
    event.op = 'u', 'MATCH(s:Speciality{id: mgerId})-[rel:belongs_to]->(:Department{id: befDep}) MATCH(d:Department{id: mgerDep}) DELETE rel MERGE (s)-[:belongs_to]->(d)'], \
    '', {mger: event.before.id, befDep: event.before.department_fk, mgerId: event.after.id, mgerDep: event.after.department_fk}) YIELD value as mger \
    RETURN mger
neo4j.topic.cypher.postgres-sync.public.departments = CALL apoc.do.case([event.op = 'd', 'MATCH (s:Speciality {id: mger}) DETACH DELETE s', \
    event.op = 'c', 'MERGE (:Department{id: mgerId})'], '', {mger: event.before.id, mgerId: event.after.id}) YIELD value as mger \
    RETURN mger